{
    "contents" : "\"\nAuthor: Joe Tuccillo\n\nDescription: \n\n  Cluster Analysis and Diagnostics.\n\n  1. Generates a block-group level cluster solution for Suffolk County, NY\n  using prepared ACS Data (see 'data_prep.R'). Workflow:\n    a) Standardize input variables (z-score).\n    b) Reduce dimensionality of input variables by converting them into leading \n       principal component scores (Principal Components Analysis and Kaiser\n       Criterion).\n    c) Perform k-medoids cluster analysis (partitioning among medoids 'PAM')\n       algorithm, with optimized group selection, using principal component\n       scores as inputs.\n\n  2. Produces maps and average profile plots of each cluster group. \n\n  3. Identifies the composition of block groups by cluster type for: \n    a) The cat 1-4 Hazard Zone. \n    b) Exposed Suffolk County communities.\n\nInputs: \n\n  1. 'inVars.prop' (from 'data/Suffolk_USGS_Inputs.RData'): a dataframe of \n     input variables for cluster analysis, combined from ACS estimates. Variables\n     are represented as proportions of the total populations of their source\n     datasets. (Generated when 'data_prep.R' is sourced).\n\n  2. 'data/tl_2014_36_bg.shp': Suffolk County, NY block group boundaries.\n\n  3. 'data/hazard_extent_Suffolk_wgs.shp': Cat 1-4 hazard zone boundaries.\n\n  4. 'data/communities_wgs.shp': Exposed Suffolk County community boundaries.\n\nOutputs: \n\n  1. 'sufClust': a dataframe comprised of block group GEOID and cluster membership.\n\n  2. 'sufMap': a map of cluster membership for Suffolk County (ggplot2 object). \n\n  3. 'hazMap' (forthcoming): a map of cluster membership within the Cat 1-4 hazard\n      zone (ggplot2 object).\n\n  3. 'sufProfile': average profile heatmap of cluster groups by input variable (ggplot2 \n      object). Plot numbers correspond to the percentage difference in the means of each \n      variable between each cluster group and the overall mean. For example, if Group 1\n      features a score of 200 for Variable A, this indicates that the mean percentage of \n      Variable A among all Group 1 members is 200% greater than the overall average.\n\n  4. Communities by cluster membership (currently runs standalone in R, but can generate\n      an output as needed).\n\n\"\n\n##Load libraries & support functions\nsource(\"support_functions.R\",echo=F)\n\n##Generate and load input data\nsource(\"data_prep.R\")\nload(\"data/Suffolk_USGS_Inputs.RData\")\n\n##Load blockgroups\nbgs<-readShapePoly(\"data/tl_2014_36_bg.shp\")\nbgs$GEOID<-paste0(\"g\",bgs$GEOID) #add leading character for compatibility with inputs\nbgs<-bgs[grepl(\"g36103\",bgs$GEOID),] #subset by Suffolk County\n\n##Load hazard zone\n# hazzn<-readShapePoly(\"data/hazard_extent_Suffolk.shp\")\nhazzn<-readShapePoly(\"data/hazard_extent_Suffolk_wgs.shp\")\n\n####Clustering####\n\n###Prep\n\n##standardize (z-score) inputs\ninVars.z<-data.frame(GEOID=inVars.prop$GEOID,scale(inVars.prop[,-1])) \n\n###Data Reduction\n\n##PCA\nsufPCA<-princomp(inVars.z[,-1])\n\n##Subset PCA scores\n##Using the Kaiser Criterion (retain PC's with eigenvalues >=0.1).\n##Can change retention rule as needed...\nvarexpl<-(sufPCA$sdev)^2 / sum(sufPCA$sdev^2) #pct variance explained\nkaiser<-length(which(varexpl>=0.1)) #length of PC's fulfilling kaiser criterion\nsufScores<-sufPCA$scores[,1:kaiser] #get PC scores - retain KC components\n\n###Cluster Analysis\n\n##k-medoids (PAM) with optimal cluster selection (library 'fpc')\n##let cluster choice float from k=7 to k=12 groups (can also change as needed).\n##starting k is set high to differentiate among hazard zone bg's --\n##tried a lower number, (krange=4:12, k=5) and group representation in \n##hazard zone was fairly homogeneous.\n##This will probably change as we add more inputs - so I will keep adjusting.\nsufClust<-data.frame(GEOID=inVars.z$GEOID,\n                     cluster=pamk(sufScores,krange=7:12)[1][[1]]$clustering,\n                     stringsAsFactors = F)\n\n\n####Visualization and Diagnostics####\n\n###Plot map of cluster results\noverview.map<-plotMap(bgs,sufClust,custom.colors=brewer.pal(12,\"Set3\"),\n        map.title=paste0(\"Suffolk County Cluster Solution, k=\",max(unique(sufClust$cluster))),\n        return.map=T)\noverview.map\n\n# ###Cluster results in the hazard zone\n#TO DO!! - something is funky with the hazard zone geometry - it isn't playing nicely with blockgroups.\n# haz.map<-overview.map<-plotMap(bgs[(!is.na((bgs %over% hazzn)$GEOID),],sufClust,custom.colors=brewer.pal(12,\"Set3\"),\n#                                map.title=\"Groups in the Hazard Zone\",return.map=T)\n# multiplot(overview.map,haz.map)\n\n\n###Average Profile Heatmap\nsufProfile<-merge(sufClust,inVars.prop)\nplotHeat(sufProfile)\n\n###Cluster Groups by Community\n\n#load communities\nsufMunis<-readShapePoly(\"data/communities_wgs.shp\")\n\n#subset blockgroups by communities\nbgs.in.muni<-bgs %over% sufMunis\nbgs.in.muni<-cbind(bgs@data,bgs.in.muni)\nbgs.in.muni<-bgs.in.muni[!is.na(bgs.in.muni$NAME10),]\n\n#This should be total population **NEED TO VERIFY**\ntotalPops<-inVars.raw$race.eth[,c(\"GEOID\",\"TOTAL\")] \n\n#Merge pops & cluster assignments to bg.in.muni\nbgs.in.muni<-merge(merge(totalPops,bgs.in.muni,by=\"GEOID\"),sufClust,by=\"GEOID\")\n\n#Aggregate by community/cluster\nclustPops<-with(bgs.in.muni,aggregate(TOTAL~NAME10+cluster,FUN=sum))\nmuniPops<-with(bgs.in.muni,aggregate(TOTAL~NAME10,FUN=sum))\n\n##Readout of cluster percentages \nfor (m in 1:nrow(muniPops)){\n  \n  muni<-muniPops[m,]$NAME10\n  \n  cat(paste0(\"Groups Representing \",muni,\":\"),sep=\"\\n\\n\")\n  \n  clusts<-clustPops[clustPops$NAME10==muni,]\n  \n  for (cl in unique(clusts$cluster)){\n    \n    clshr<-round(100*(clusts[clusts$cluster==cl,]$TOTAL/muniPops[m,]$TOTAL),2)\n    \n    cat(paste0(\"CLUSTER \",cl,\": \",clshr,\"%\"),sep=\"\\n\")\n    \n  }\n  \n  cat(sep=\"\\n\\n\")\n  \n}\n",
    "created" : 1455466399766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3394186026",
    "id" : "DF33EB07",
    "lastKnownWriteTime" : 1455579540,
    "path" : "~/GitHub/suffolk_USGS/clustering.R",
    "project_path" : "clustering.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}