{
    "contents" : "\"\nAuthor: Joe Tuccillo\n\nDescription: Assembles raw ACS input data by source dataset into an R dataframe\n  of input variables for cluster analysis. \n\nInputs: \n\n  1. 'data/blockgroup_all_combined_ests.csv': Combined ACS 5-Year Estimates (2014) at the\n    block-group level for selected datasets..\n\n  2. 'data/data_dict_ACS5Y2014.csv': data dictionary for selected ACS \n    datasets.\n\nOutputs: RData file 'Suffolk_USGS_Inputs.RData', which contains: \n\n  1. 'inVars.prop': a dataframe of input variables for cluster analysis,\n    combined from ACS estimates. Variables are represented as proportions\n    of the total populations of their source datasets. \n  \n  2. 'inVars.raw': a supplementary list of dataframes sorted by source ACS dataset.\n    Each dataframe features the total population of the source dataset and raw\n    counts of variables comprising 'inVars.prop'. Used for clustering \n    diagnostics (i.e. Gini index).\n\n\"\n\n####Setup####\n\ninVars<-read.csv(\"data/blockgroup_all_combined_ests.csv\",stringsAsFactors = F)\ndata.dict<-read.csv(\"data/data_dict_ACS5Y2014.csv\",stringsAsFactors = F)\n\n#Exclude SE's (for now)\ninVars<-inVars[,!grepl(\"SE_\",names(inVars))]\n\n#Make variable names human-readable using data dictionary\nnames(inVars)[-1]<-substr(names(inVars)[-1],1,(nchar(names(inVars)[-1])-1)) #remove trailing character from var names\nnames(inVars)[2:length(inVars)]<-sapply(X=names(inVars)[2:length(inVars)],FUN=function(X){ X<-data.dict[data.dict$Variable==X,]$Name })\n\n#more readable reference for subsetting...\nenumNames<-function(x){ data.frame(names(x)) } \n\n####Combine Variables####\n\n##Create list for storing raw variable counts/totals (data frames).\n#this is used to perform Gini diagnostics for clusters.\ninVars.raw<-list()\n\n##Create data frame for storing proportions of raw variables. \ninVars.prop<-data.frame(GEOID=inVars$GEOID)\n\n#for converting raw data values to proportions\n#now in 'support_functions.R'\n# toprop<-function(inData){ return(data.frame(GEOID=inData$GEOID,sapply(X=inData[,-c(1:2)],FUN=function(X){X/inData$TOTAL}))) }\n\n##I'm calculating totals by summing values for each dataset, since\n#total fields appear to be missing. I'm assuming complete datasets were pulled (edit: not race/eth - need fix).\n#I'll replace these with the total ests once I can find them to avoid\n#any inconsistencies...\n\n###Biophysical###\n\n###Housing Stock Age\ninVars.raw$hage<-data.frame(GEOID=inVars$GEOID,TOTAL=inVars[,2]) #create list entry for 'inVars.raw'\ninVars.raw$hage$HS.1940.before<-inVars[,3] #1940 or before\ninVars.raw$hage$HS.Mid20th<-rowSums(inVars[,4:6],na.rm=T) #Mid-20th Century (1940-1970)\ninVars.raw$hage$HS.Late20th<-rowSums(inVars[,7:9],na.rm=T) #Late 20th Century (1970-2000)\ninVars.raw$hage$HS.2000s<-rowSums(inVars[,10:11],na.rm=T) #Since 2000\ninVars.prop<-merge(inVars.prop,toprop(inVars.raw$hage),by=\"GEOID\") #append to 'inVars.prop'\n\n##Housing Stock Size\ninVars.raw$hsize<-data.frame(GEOID=inVars$GEOID,TOTAL=inVars[,12])\ninVars.raw$hsize$HU.SFR<-rowSums(inVars[,13:14],na.rm = T)\ninVars.raw$hsize$HU.MFR.sm<-rowSums(inVars[,15:17],na.rm=T)\ninVars.raw$hsize$HU.MFR.lg<-rowSums(inVars[,18:20],na.rm=T)\ninVars.prop<-merge(inVars.prop,toprop(inVars.raw$hsize),by=\"GEOID\")\n\n##Home Values\ninVars.raw$hval<-data.frame(GEOID=inVars$GEOID,TOTAL=inVars[,46])\ninVars.raw$hval$HV.Under200k<-rowSums(inVars[,47:63],na.rm=T)\ninVars.raw$hval$HV.200k.500k<-rowSums(inVars[,64:67],na.rm=T)\ninVars.raw$hval$HV.500k.greater<-rowSums(inVars[,68:70],na.rm=T)\ninVars.prop<-merge(inVars.prop,toprop(inVars.raw$hval),by=\"GEOID\")\n\n##Land Cover\n##ADD ME!!\n\n###SES###\n\n##Race/Ethnicity\n#**Is this the right total population field??**\ninVars.raw$race.eth<-data.frame(GEOID=inVars$GEOID,TOTAL=inVars[,21],\n                          inVars[,22:25])\ninVars.prop<-merge(inVars.prop,toprop(inVars.raw$race.eth),by=\"GEOID\")\n\n##Age \n##ADD ME!!\n\n##Income level\n##ADD ME!!\n\n##Family Structure\ninVars.raw$fam<-data.frame(GEOID=inVars$GEOID,TOTAL=inVars[,26])\ninVars.raw$fam$HH.Married<-inVars[,27]\ninVars.raw$fam$HH.SinglePt<-inVars[,28]\ninVars.raw$fam$HH.NonFamily<-rowSums(inVars[,29:30],na.rm=T)\ninVars.prop<-merge(inVars.prop,toprop(inVars.raw$fam),by=\"GEOID\")\n\n##Length in Residence\n##ADD ME!!\n\n##Seasonal Homes\n##ADD ME!! - variable is there but need a total field\n\n####Cleanup#####\n\n###Remove observations with household count of 0###\n\n##Generate empty GEOIDs list\nempty.list<-list.files(paste0(getwd(),\"/data\"))\nempty.list<-empty.list[grepl(\"_empty\",empty.list)]\n\nempties<-data.frame()\nfor (empty in empty.list){\n  \n  emp<-read.csv(paste0(\"data/\",empty),header=F,stringsAsFactors = F)\n  empties<-rbind(empties,emp)\n  \n}\n\n##Remove empty observations from 'inVars.prop' and 'inVars.raw'\ninVars.prop<-inVars.prop[!inVars.prop$GEOID %in% empties,]\ninVars.raw<-sapply(X=inVars.raw,FUN=function(X){ X<-X[!X$GEOID %in% empties,] })\n\n\n###Subset Data by Complete Cases###\ninVars.prop<-inVars.prop[complete.cases(inVars.prop),]\ninVars.raw<-sapply(X=inVars.raw,FUN=function(X){ X<-X[complete.cases(X),] })\n\n\n####Save Data####\nsave(list = c(\"inVars.raw\",\"inVars.prop\"),file=\"data/Suffolk_USGS_Inputs.RData\")\n\n",
    "created" : 1455574230515.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4276234947",
    "id" : "5F11E824",
    "lastKnownWriteTime" : 1455577285,
    "path" : "~/GitHub/suffolk_USGS/data_prep.R",
    "project_path" : "data_prep.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}